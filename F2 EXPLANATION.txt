1. `#include <bits/stdc++.h>`: This line includes a header file that contains most of the standard C++ libraries. It's a convenient way to include many libraries at once, but it's not recommended for production code because it can slow down the compilation process.

2. `#define max 20`: This line defines a macro named `max` with a value of 20. This is the maximum number of employees that can be stored in the system.

3. `using namespace std;`: This line allows us to use names from the `std` namespace (like `string` and `cout`) without having to prefix them with `std::`.

4. The `struct employee` block defines a new data type named `employee`. Each `employee` has a `name` (a string), a `code` (a long integer), a `designation` (a string), `exp` (an integer representing experience), and `age` (an integer).

5. `int num;`: This line declares an integer variable `num` which will hold the current number of employees.

6. `void showMenu();`: This line declares a function named `showMenu` that takes no arguments and returns no value. The actual definition of this function is provided later in the code.

7. `employee emp[max], tempemp[max], sortemp[max], sortemp1[max];`: This line declares four arrays of `employee` structures. Each array can hold up to `max` employees. These arrays are used to store and manipulate employee data.

8. The `insert` function is used to add a new employee to the system. It first checks if there is room for a new employee (`num < max`). If there is, it increments `num`, asks the user for the new employee's details, and stores them in the `emp` array. If there isn't room, it prints a message saying "Employee Size Full". After adding an employee (or attempting to), it calls `showMenu` to display the menu again.

9. The `deleteIndex` function is a helper function used by `deleteRecord`. It removes the employee at a given index by shifting all subsequent employees up one position in the `emp` array.

10. The `deleteRecord` function asks the user for an employee ID, then searches for an employee with that ID in the `emp` array. If it finds one, it calls `deleteIndex` to remove that employee, then decrements `num` to reflect the new total number of employees. It then calls `showMenu` to display the menu again.

11. The `searchRecord` function asks the user for an employee ID, then searches for an employee with that ID in the `emp` array. If it finds one, it prints that employee's details. It then calls `showMenu` to display the menu again.

12. The `showMenu` function prints a menu of options and asks the user to choose one. Depending on the user's choice, it calls `insert`, `deleteRecord`, `searchRecord`, or simply returns (which ends the program).

13. The `main` function is the entry point of the program. It simply calls `showMenu` to start the program.

This program is a simple Employee Management System that allows the user to add, delete, and search for employees. The user interacts with the system through a text-based menu. The program keeps running until the user chooses to exit. The employee data is not saved when the program ends. The commented out `build` function seems to be an alternative way to initially populate the `emp` array, but it's not used in this version of the program.