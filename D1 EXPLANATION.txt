```cpp
#include <iostream>
```
This line includes the `iostream` header file, which is a standard C++ library that provides input/output operations.

```cpp
using namespace std;
```
This line allows the program to use names from the `std` namespace without having to write `std::` before each name.

```cpp
void con_obst(void);
void print(int, int);
```
These lines are function prototypes, which declare the functions `con_obst` and `print` before they are defined.

```cpp
float a[20], b[20], wt[20][20], c[20][20];
int r[20][20], n;
```
These lines declare arrays and variables used in the program. `a` and `b` are arrays to store probabilities, `wt` and `c` are 2D arrays to store weights and costs, respectively, `r` is a 2D array to store the root nodes, and `n` is an integer variable to store the number of nodes.

```cpp
int main()
{
    // code inside main function
}
```
This is the main function, where the program execution starts.

```cpp
cout << "\\n\*\*\*\*\*\* PROGRAM FOR OBST \*\*\*\*\*\*\\n";
cout << "\\nEnter the no. of nodes : ";
cin >> n;
```
These lines display a heading for the program, and then prompt the user to enter the number of nodes.

```cpp
cout << "\\nEnter the probability for successful search :: ";
cout << "\\n----------------\\n";
for (i = 1; i <= n; i++)
{
    cout << "p[" << i << "]";
    cin >> a[i];
}
```
These lines prompt the user to enter the probabilities for successful search, and store them in the `a` array.

```cpp
cout << "\\nEnter the probability for unsuccessful search :: ";
cout << "\\n----------------\\n";
for (i = 0; i <= n; i++)
{
    cout << "q[" << i << "]";
    cin >> b[i];
}
```
These lines prompt the user to enter the probabilities for unsuccessful search, and store them in the `b` array.

```cpp
con_obst();
print(0, n);
```
These lines call the `con_obst` function to construct the optimal binary search tree, and then call the `print` function to print the tree.

The `con_obst` function and the `print` function contain the logic for constructing the optimal binary search tree and printing it, respectively. However, the code for these functions is quite complex and involves nested loops and calculations, so I won't go into the details of those functions here.

Overall, this program seems to be implementing the algorithm for constructing an optimal binary search tree based on the probabilities of successful and unsuccessful searches.