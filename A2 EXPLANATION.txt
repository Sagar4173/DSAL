```python
def setCreate():
    l1 = eval(input("Enter values in set"))
    return (set(l1))
```
This function `setCreate()` asks the user to enter values for a set. The values should be entered in a format that Python can understand, like `[1, 2, 3]` for a list. The `eval()` function is used to convert the user's input into a Python object (like a list). Then, the `set()` function is used to convert that object into a set, and this set is returned by the function.

```python
def setUpdate(set1, data):
    s1 = set(data)
    s1.update(set1)
    return (s1)
```
This function `setUpdate()` takes two inputs: `set1` (an existing set) and `data` (a new element or a collection of elements). It converts `data` into a set using `set(data)`. Then, it adds all the elements from `set1` into the new set `s1` using the `update()` method. Finally, it returns the updated set `s1`.

```python
def setRemove(set1, data):
    if (setContains(set1, data)):
        set1.remove(data)
    return (set1)
```
This function `setRemove()` takes two inputs: `set1` (an existing set) and `data` (an element to remove). It first checks if `data` is present in `set1` using the `setContains()` function (which we'll explain later). If `data` is present, it removes that element from `set1` using the `remove()` method. Finally, it returns the modified `set1`.

```python
def setContains(set1, data):
    s1 = {data}
    if (s1.issubset(set1)):
        return (True)
    else:
        return (False)
```
This function `setContains()` takes two inputs: `set1` (an existing set) and `data` (an element to check). It creates a new set `s1` containing only the element `data`. Then, it checks if `s1` is a subset of `set1` using the `issubset()` method. If `s1` is a subset of `set1`, it means that `data` is present in `set1`, so it returns `True`. Otherwise, it returns `False`.

```python
def setSize(s1):
    return (len(s1))
```
This function `setSize()` takes one input: `s1` (a set). It returns the number of elements in the set `s1` using the `len()` function.

```python
def union(s1, s2):
    return (s1.union(s2))
```
This function `union()` takes two inputs: `s1` and `s2` (two sets). It returns a new set that contains all the elements from both `s1` and `s2`, without any duplicates.

```python
def diff(s1, s2):
    s1 -= s2
    return (s1)
```
This function `diff()` takes two inputs: `s1` and `s2` (two sets). It removes all the elements from `s2` that are present in `s1`. In other words, it returns a new set that contains only the elements from `s1` that are not present in `s2`.

```python
def intersect(s1, s2):
    s1 &= s2
    return (s1)
```
This function `intersect()` takes two inputs: `s1` and `s2` (two sets). It returns a new set that contains only the elements that are common to both `s1` and `s2`.

```python
def symmetric_diff(s1, s2):
    s1 ^= s2
    return (s1)
```
This function `symmetric_diff()` takes two inputs: `s1` and `s2` (two sets). It returns a new set that contains all the elements that are in either `s1` or `s2`, but not in both.

```python
# driver
s1 = setCreate()
s1 = setUpdate(s1, [1, 2, 6])
print(s1)
s1 = setRemove(s1, 6)
print(s1)
print(setContains(s1, 5))
print(setContains(s1, 6))
s1 = setUpdate({1, 2, 3, 4, 5}, {4, 5, 6})
print(s1)
print(union({1, 2, 3, 4, 5}, {4, 5, 6}))
print(diff({1, 2, 3, 4, 5}, {4, 5, 6}))
print(intersect({1, 2, 3, 4, 5}, {4, 5, 6}))
print(symmetric_diff({1, 2, 3, 4, 5}, {4, 5, 6}))
print(setSize({1, 2, 3, 4, 5}))
```
This is the main part of the program where the functions are used:

1. `s1 = setCreate()` creates a new set `s1` by asking the user to enter values.
2. `s1 = setUpdate(s1, [1, 2, 6])` adds the elements `1`, `2`, and `6` to the set `s1`.
3. `print(s1)` prints the updated set `s1`.
4. `s1 = setRemove(s1, 6)` removes the element `6` from the set `s1`.
5. `print(s1)` prints the modified set `s1`.
6. `print(setContains(s1, 5))` checks if the element `5` is present in `s1` and prints `True` or `False`.
7. `print(setContains(s1, 6))` checks if the element `6` is present in `s1` and prints `True` or `False`.
8. `s1 = setUpdate({1, 2, 3, 4, 5}, {4, 5, 6})` updates `s1` by adding all elements from `{1, 2, 3, 4, 5}` and `{4, 5, 6}`.
9. `print(s1)` prints the updated set `s1`.
10. `print(union({1, 2, 3, 4, 5}, {4, 5, 6}))` prints the union of the two sets `{1, 2, 3, 4, 5}` and `{4, 5, 6}`.
11. `print(diff({1, 2, 3, 4, 5}, {4, 5, 6}))` prints the difference between the two sets `{1, 2, 3, 4, 5}` and `{4, 5, 6}`.
12. `print(intersect({1, 2, 3, 4, 5}, {4, 5, 6}))` prints the intersection of the two sets `{1, 2, 3, 4, 5}` and `{4, 5, 6}`.
13. `print(symmetric_diff({1, 2, 3, 4, 5}, {4, 5, 6}))` prints the symmetric difference between the two sets `{1, 2, 3, 4, 5}` and `{4, 5, 6}`.
14. `print(setSize({1, 2, 3, 4, 5}))` prints the number of elements in the set `{1, 2, 3, 4, 5}`.