```cpp
#include <iostream>
#include <string.h>
using namespace std;
```
These lines are preprocessor directives that include the necessary header files for input/output operations (`iostream`) and string handling (`string.h`). The `using namespace std;` line allows us to use the standard namespace without having to write `std::` before every function or class from the standard library.

```cpp
struct node // Node Declaration
{
    string label;
    //char label[10];
    int ch_count;
    struct node *child[10];
} *root;
```
This is the declaration of a node structure for creating a tree-like data structure. Each node has the following members:
- `label`: a string to store the name of the node (e.g., book title, chapter name, or section name).
- `ch_count`: an integer to store the number of child nodes.
- `child`: an array of pointers to `node` structures, representing the child nodes.
- `root`: a pointer to a `node` structure, which will be the root of the tree.

```cpp
class GT // Class Declaration
{
public:
    void create_tree();
    void display(node *r1);
    GT()
    {
        root = NULL;
    }
};
```
This is the declaration of a class `GT` (short for General Tree) with the following member functions:
- `create_tree()`: a function to create the tree structure by taking input from the user.
- `display(node *r1)`: a function to display the tree structure.
- The constructor `GT()` initializes the `root` pointer to `NULL`.

```cpp
void GT::create_tree()
{
    int tbooks, tchapters, i, j, k;
    root = new node;
    cout << "Enter name of book : ";
    cin.get();
    getline(cin, root->label);
    cout << "Enter number of chapters in book : ";
    cin >> tchapters;
    root->ch_count = tchapters;
    for (i = 0; i < tchapters; i++)
    {
        root->child[i] = new node;
        cout << "Enter the name of Chapter " << i + 1 << " : ";
        cin.get();
        getline(cin, root->child[i]->label);
        cout << "Enter number of sections in Chapter : " << root->child[i]->label << " : ";
        cin >> root->child[i]->ch_count;
        for (j = 0; j < root->child[i]->ch_count; j++)
        {
            root->child[i]->child[j] = new node;
            cout << "Enter Name of Section " << j + 1 << " : ";
            cin.get();
            getline(cin, root->child[i]->child[j]->label);
        }
    }
}
```
This function `create_tree()` is responsible for creating the tree structure by taking input from the user. Here's what it does:
1. It prompts the user to enter the name of the book and stores it in the `label` member of the `root` node.
2. It prompts the user to enter the number of chapters in the book and stores it in the `ch_count` member of the `root` node.
3. It then enters a loop to create child nodes for each chapter.
4. For each chapter, it creates a new node and prompts the user to enter the chapter name, which is stored in the `label` member of the child node.
5. It prompts the user to enter the number of sections in the chapter and stores it in the `ch_count` member of the child node.
6. It then enters another loop to create child nodes for each section within the chapter.
7. For each section, it creates a new node and prompts the user to enter the section name, which is stored in the `label` member of the child node.

```cpp
void GT::display(node *r1)
{
    int i, j, k, tchapters;
    if (r1 != NULL)
    {
        cout << "\n-----Book Hierarchy---";
        cout << "\n Book title : " << r1->label;
        tchapters = r1->ch_count;
        for (i = 0; i < tchapters; i++)
        {
            cout << "\nChapter " << i + 1;
            cout << " : " << r1->child[i]->label;
            cout << "\nSections : ";
            for (j = 0; j < r1->child[i]->ch_count; j++)
            {
                cout << "\n" << r1->child[i]->child[j]->label;
            }
        }
    }
    cout << endl;
}
```
This function `display(node *r1)` is responsible for displaying the tree structure in a hierarchical format. Here's what it does:
1. It first checks if the `r1` pointer (which represents the root node) is not `NULL`.
2. If `r1` is not `NULL`, it prints the heading "-----Book Hierarchy---" and the book title stored in the `label` member of the `root` node.
3. It then enters a loop to display the chapters and their respective sections.
4. For each chapter, it prints the chapter number and name stored in the `label` member of the child node.
5. It then enters another loop to display the sections within the chapter.
6. For each section, it prints the section name stored in the `label` member of the child node.

```cpp
int main()
{
    int choice;
    GT gt;
    while (1)
    {
        cout << "-----------------" << endl;
        cout << "Book Tree Creation" << endl;
        cout << "-----------------" << endl;
        cout << "1.Create" << endl;
        cout << "2.Display" << endl;
        cout << "3.Quit" << endl;
        cout << "Enter your choice : ";
        cin >> choice;
        switch (choice)
        {
        case 1:
            gt.create_tree();
            break;
        case 2:
            gt.display(root);
            break;
        case 3:
            cout << "Thanks for using this program!!!";
            exit(1);
        default:
            cout << "Wrong choice!!!" << endl;
        }
    }
    return 0;
}
```
This is the `main()` function, which is the entry point of the program. Here's what it does:
1. It creates an object `gt` of the `GT` class.
2. It enters an infinite loop (`while (1)`) to display a menu and take user input.
3. The menu displays three options: 1. Create, 2. Display, and 3. Quit.
4. The user is prompted to enter their choice.
5. Based on the user's choice, the corresponding function (`create_tree()` or `display(root)`) is called using the `gt` object.
6. If the user chooses option 3 (Quit), the program prints "Thanks for using this program!!!" and exits using the `exit(1)` statement.
7. If the user enters an invalid choice, the program prints "Wrong choice!!!" and continues to the next iteration of the loop.

The program allows the user to create a tree-like structure representing a book with chapters and sections, and then displays the hierarchy of the book in a structured format.