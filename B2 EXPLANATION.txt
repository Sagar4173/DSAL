```cpp
#include<bits/stdc++.h>
using namespace std;
```
These lines include all the necessary header files in C++ and allow the use of standard namespace `std`.

```cpp
struct Node
{
    int data;
    Node *left;
    Node *right;
    Node(int data)
    {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};
```
This is the definition of a `Node` structure. Each node has three members:
- `data`: an integer value to store the data of the node.
- `left`: a pointer to the left child node.
- `right`: a pointer to the right child node.
- `Node(int data)`: a constructor that initializes the `data` member with the given value and sets `left` and `right` pointers to `NULL`.

```cpp
void traversal(Node* root)
{
    if (root == NULL)
    {
        return;
    }
    else
    {
        cout << root->data << " ";
        traversal(root->left);
        traversal(root->right);
    }
}
```
This function `traversal` performs a pre-order traversal of the binary search tree (BST). It takes the root node as input and recursively visits each node in the order: root, left subtree, right subtree. If the root is `NULL`, it returns without doing anything. Otherwise, it prints the data of the current node, then recursively calls `traversal` for the left subtree, and then for the right subtree.

```cpp
Node* insert(Node* &root, int x)
{
    if (root == NULL)
    {
        root = new Node(x);
    }
    else if (x >= root->data)
    {
        root->right = insert(root->right, x);
    }
    else if (x < root->data)
    {
        root->left = insert(root->left, x);
    }
    return root;
}
```
This function `insert` inserts a new node with value `x` into the BST. It takes the root node and the value `x` as input. If the root is `NULL`, it creates a new node with value `x` and assigns it to the root. Otherwise, if `x` is greater than or equal to the current root's data, it recursively calls `insert` on the right subtree. If `x` is less than the current root's data, it recursively calls `insert` on the left subtree. Finally, it returns the root of the modified BST.

```cpp
int height(Node* root)
{
    if (root == NULL)
    {
        return 0;
    }
    int left_subtree = 1 + height(root->left);
    int right_subtree = 1 + height(root->right);
    return max(left_subtree, right_subtree);
}
```
This function `height` calculates the height of the BST. It takes the root node as input. If the root is `NULL`, it returns 0 (height of an empty tree). Otherwise, it recursively calculates the height of the left subtree (`left_subtree`) and the height of the right subtree (`right_subtree`). The height of a non-empty tree is the maximum of the heights of its left and right subtrees, plus 1 (for the root node). The function returns the maximum of `left_subtree` and `right_subtree`.

```cpp
int minimum(Node* root)
{
    if (root->left == NULL)
    {
        return root->data;
    }
    return min(minimum(root->left), root->data);
}
```
This function `minimum` finds the minimum value in the BST. It takes the root node as input. If the left child of the root is `NULL`, it means the current node is the leftmost node, and its data is the minimum value. Otherwise, it recursively calls `minimum` on the left subtree and returns the minimum of the current node's data and the minimum value in the left subtree.

```cpp
void search(Node* root, int key, bool &present)
{
    if (root == NULL)
    {
        return;
    }
    if (root->data == key)
    {
        present = true;
    }
    else if (root->data > key)
    {
        search(root->left, key, present);
    }
    else if (root->data <= key)
    {
        search(root->right, key, present);
    }
}
```
This function `search` searches for a given `key` value in the BST. It takes the root node, the `key` value, and a reference to a boolean variable `present` as input. If the root is `NULL`, it returns without doing anything. If the data of the current node is equal to the `key`, it sets `present` to `true`. If the `key` is less than the current node's data, it recursively calls `search` on the left subtree. If the `key` is greater than or equal to the current node's data, it recursively calls `search` on the right subtree.

```cpp
void mirror(Node* &root)
{
    if (root == NULL)
    {
        return;
    }
    mirror(root->left);
    mirror(root->right);
    swap(root->left, root->right);
}
```
This function `mirror` creates a mirror image of the BST. It takes the root node as input and modifies the tree in-place. If the root is `NULL`, it returns without doing anything. Otherwise, it recursively calls `mirror` on the left and right subtrees, and then swaps the left and right child pointers of the current node using the `swap` function.

```cpp
int main()
{
    Node *root = NULL;
    int n;
    cout << "Enter the number of nodes to be inserted in the BST-\n";
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        int element;
        cout << "Enter the data value to be inserted-\n";
        cin >> element;
        insert(root, element);
    }
    cout << "Displaying the elements of the BST-\n";
    traversal(root);
    cout << endl;
    cout << "Height of the tree is " << height(root) << endl;
    cout << "Minimum value in the BST is " << minimum(root) << endl;
    int key;
    cout << "Enter the data value to be searched in the BST-\n";
    cin >> key;
    bool present = false;
    search(root, key, present);
    if (present == true)
    {
        cout << "Key is present in the BST!" << endl;
    }
    else
    {
        cout << "Key is not present in the BST!" << endl;
    }
    return 0;
}
```
This is the `main` function, which is the entry point of the program. Here's what it does:

1. It initializes the root of the BST as `NULL`.
2. It prompts the user to enter the number of nodes to be inserted in the BST and stores the input in the variable `n`.
3. It enters a loop that runs `n` times, where it prompts the user to enter the data value to be inserted and calls the `insert` function to insert the value into the BST.
4. After inserting all the nodes, it calls the `traversal` function to display the elements of the BST in pre-order.
5. It then prints the height of the BST by calling the `height` function.
6. It prints the minimum value in the BST by calling the `minimum` function.
7. It prompts the user to enter a data value to be searched in the BST and stores the input in the variable `key`.
8. It initializes a boolean variable `present` to `false`.
9. It calls the `search` function to search for the `key` value in the BST, passing the root, `key`, and `present` as arguments.
10. Based on the value of `present` after the `search` function call, it prints whether the `key` is present or not in the BST.
11. Finally, it returns 0 to indicate successful program execution.

The program allows the user to create a binary search tree (BST) by inserting nodes one by one. It then performs various operations on the BST, such as traversal, height calculation,