```cpp
#include<iostream>
using namespace std;
```
These lines include the necessary header file `iostream` for input/output operations and allow the use of the standard namespace `std`.

```cpp
class tree { 
    int a[20][20], l, u, w, i, j, v, e, visited[20];
public:
    void input();
    void display();
    void minimum();
};
```
This is the definition of a class named `tree`. It has the following members:
- `a`: a 2D array of size 20x20 to store the adjacency matrix of the graph.
- `l`, `u`, `w`: variables to store the end branches of a connection and the weight (cost) of the connection.
- `i`, `j`: loop counter variables.
- `v`: variable to store the number of branches (vertices) in the graph.
- `e`: variable to store the number of connections (edges) in the graph.
- `visited`: an array of size 20 to keep track of visited vertices during the minimum cost spanning tree computation.
- `input()`: a member function to take input from the user and create the adjacency matrix.
- `display()`: a member function to display the adjacency matrix.
- `minimum()`: a member function to find the minimum cost spanning tree using Prim's algorithm.

```cpp
void tree::input()
{
    cout<<"Enter the no. of branches: ";
    cin>>v;
    for(i=0; i<v; i++)
    {
        visited[i] = 0;
        for(j=0; j<v; j++)
        {
            a[i][j] = 999;
        }
    }
    cout<<"\nEnter the no. of connections: ";
    cin>>e;
    for(i=0; i<e; i++)
    {
        cout<<"Enter the end branches of connections: "<<endl;
        cin>>l>>u;
        cout<<"Enter the phone company charges for this connection: ";
        cin>>w;
        a[l-1][u-1] = a[u-1][l-1] = w;
    }
}
```
This is the implementation of the `input()` member function. It performs the following tasks:
1. It prompts the user to enter the number of branches (vertices) and stores it in the variable `v`.
2. It initializes the `visited` array with 0 (unvisited) for all vertices.
3. It initializes the adjacency matrix `a` with a large value (999) to represent no connection between vertices initially.
4. It prompts the user to enter the number of connections (edges) and stores it in the variable `e`.
5. It enters a loop that runs `e` times, where it prompts the user to enter the end branches of a connection and the cost (weight) of the connection.
6. It updates the adjacency matrix `a` by storing the cost in the appropriate positions (both `a[l-1][u-1]` and `a[u-1][l-1]` since the graph is undirected).

```cpp
void tree::display()
{
    cout<<"\nAdjacency matrix:";
    for(i=0; i<v; i++)
    {
        cout<<endl;
        for(j=0; j<v; j++)
        {
            cout<<a[i][j]<<" ";
        }
        cout<<endl;
    }
}
```
This is the implementation of the `display()` member function. It prints the adjacency matrix of the graph by iterating over the 2D array `a` and printing each element.

```cpp
void tree::minimum()
{
    int p=0, q=0, total=0, min;
    visited[0] = 1;
    for(int count=0; count<(v-1); count++)
    {
        min = 999;
        for(i=0; i<v; i++)
        {
            if(visited[i] == 1)
            {
                for(j=0; j<v; j++)
                {
                    if(visited[j] != 1)
                    {
                        if(min > a[i][j])
                        {
                            min = a[i][j];
                            p = i;
                            q = j;
                        }
                    }
                }
            }
        }
        visited[p] = 1;
        visited[q] = 1;
        total = total + min;
        cout<<"Minimum cost connection is"<<(p+1)<<" -> "<<(q+1)<<" with charge : "<<min<< endl;
    }
    cout<<"The minimum total cost of connections of all branches is: "<<total<<endl;
}
```
This is the implementation of the `minimum()` member function, which finds the minimum cost spanning tree using Prim's algorithm. Here's how it works:
1. It initializes variables `p`, `q`, `total`, and `min`.
2. It marks the first vertex (branch) as visited by setting `visited[0]` to 1.
3. It enters a loop that runs `(v-1)` times, where `v` is the number of vertices.
4. Inside the loop, it initializes `min` with a large value (999).
5. It enters nested loops to find the minimum weight edge that connects a visited vertex to an unvisited vertex.
6. After finding the minimum weight edge, it marks the vertices `p` and `q` (representing the end branches of the minimum weight edge) as visited by setting `visited[p]` and `visited[q]` to 1.
7. It adds the minimum weight to the `total` variable.
8. It prints the minimum cost connection found in the current iteration.
9. After the outer loop completes, it prints the minimum total cost of connections of all branches.

```cpp
int main()
{
    int ch;
    tree t;
    do
    {
        cout<<"==========PRIM'S ALGORITHM================="<<endl;
        cout<<"\n1.INPUT\n \n2.DISPLAY\n \n3.MINIMUM\n"<<endl;
        cout<<"Enter your choice :"<<endl;
        cin>>ch;
        switch(ch)
        {
            case 1: cout<<"\*\*\*\*\*\*\*INPUT YOUR VALUES\*\*\*\*\*\*\*"<<endl;
                    t.input();
                    break;
            case 2: cout<<"\*\*\*\*\*\*\*DISPLAY THE CONTENTS\*\*\*\*\*\*\*\*"<<endl;
                    t.display();
                    break;
            case 3: cout<<"\*\*\*\*\*\*\*\*\*MINIMUM\*\*\*\*\*\*\*\*\*\*\*\*"<<endl;
                    t.minimum();
                    break;
        }
    } while(ch!=4);
    return 0;
}
```
This is the `main()` function, which is the entry point of the program. Here's what it does:
1. It declares a variable `ch` to store the user's choice.
2. It creates an object `t` of the `tree` class.
3. It enters a `do-while` loop that continues until the user chooses option 4 (exit).
4. Inside the loop, it displays a menu with options 1 (INPUT), 2 (DISPLAY), and 3 (MINIMUM).
5. It prompts the user to enter their choice and stores it in the variable `ch`.
6. Based on the user's choice, it calls the corresponding member function (`input()`, `display()`, or `minimum()`) of the `tree` object `t`.
7. After the loop terminates, it returns 0 to indicate successful program execution.

The program implements Prim's algorithm to find the minimum cost spanning tree of a graph representing branches of a telephone network and the costs of connecting those branches. The user can input the number of branches, connections, and their costs, and the program calculates and displays the minimum total cost of connecting all branches.