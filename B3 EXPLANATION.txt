```cpp
#include <bits/stdc++.h>
using namespace std;
```
These lines include all the necessary header files in C++ and allow the use of the standard namespace `std`.

```cpp
/* Structure of a node in threaded binary tree */
struct Node
{
    int key;
    Node *left, *right;
    bool isThreaded;
};
```
This is the definition of a `Node` structure for a threaded binary tree. Each node has the following members:
- `key`: an integer value to store the data of the node.
- `left`: a pointer to the left child node.
- `right`: a pointer to the right child node or the inorder successor if `isThreaded` is true.
- `isThreaded`: a boolean flag indicating whether the `right` pointer points to the inorder successor or the right child.

```cpp
// Helper function to put the Nodes in inorder into queue
Node *createThreaded(Node *root)
{
    if (root == NULL)
        return NULL;
    if (root->left == NULL &&
        root->right == NULL)
        return root;
    if (root->left != NULL)
    {
        Node *l = createThreaded(root->left);
        l->right = root;
        l->isThreaded = true;
    }
    if (root->right == NULL)
        return root;
    return createThreaded(root->right);
}
```
This function `createThreaded` converts a binary tree into a threaded binary tree. It takes the root node of the binary tree as input and recursively creates the threaded links. Here's how it works:
1. If the root is `NULL`, it returns `NULL`.
2. If the root is a leaf node (both left and right children are `NULL`), it returns the root node itself.
3. If the root has a left child, it recursively calls `createThreaded` on the left subtree and stores the leftmost node of the left subtree in `l`.
4. It sets the `right` pointer of `l` to the current root node and sets `isThreaded` to `true` for `l`.
5. If the root has no right child, it returns the root node.
6. If the root has a right child, it recursively calls `createThreaded` on the right subtree.

```cpp
Node *leftMost(Node *root)
{
    while (root != NULL && root->left != NULL)
        root = root->left;
    return root;
}
```
This function `leftMost` finds the leftmost node in a binary tree or a subtree. It takes the root node as input and traverses the left child pointers until it reaches the leftmost node. It then returns the leftmost node.

```cpp
void inorder(Node *root)
{
    if (root == NULL)
        return;
    Node *cur = leftMost(root);
    while (cur != NULL)
    {
        cout << cur->key << " ";
        if (cur->isThreaded)
            cur = cur->right;
        else
            cur = leftMost(cur->right);
    }
}
```
This function `inorder` performs an inorder traversal of the threaded binary tree. It takes the root node as input. Here's how it works:
1. If the root is `NULL`, it returns without doing anything.
2. It calls the `leftMost` function to find the leftmost node of the tree and stores it in `cur`.
3. It enters a loop that continues until `cur` becomes `NULL`.
4. In the loop, it prints the `key` value of the current node `cur`.
5. If `cur` is threaded (i.e., `isThreaded` is `true`), it moves to the inorder successor by following the `right` pointer.
6. If `cur` is not threaded, it finds the leftmost node of the right subtree by calling `leftMost(cur->right)`.

```cpp
Node *newNode(int key)
{
    Node *temp = new Node;
    temp->left = temp->right = NULL;
    temp->key = key;
    return temp;
}
```
This function `newNode` creates a new node with the given `key` value. It initializes the `left` and `right` pointers to `NULL` and sets the `key` value. It then returns the newly created node.

```cpp
int main()
{
    Node *root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);

    createThreaded(root);

    cout << "Inorder traversal of created "
         "threaded tree is\n";
    inorder(root);

    return 0;
}
```
This is the `main` function, which is the entry point of the program. Here's what it does:
1. It creates a binary tree with the following structure:
```
        1
       / \
      2   3
     / \ / \
    4  5 6  7
```
2. It calls the `createThreaded` function to convert the binary tree into a threaded binary tree.
3. It prints the message "Inorder traversal of created threaded tree is".
4. It calls the `inorder` function to perform an inorder traversal of the threaded binary tree.
5. Finally, it returns 0 to indicate successful program execution.

The program demonstrates how to convert a binary tree into a threaded binary tree and perform an inorder traversal on the threaded binary tree using the threaded links.