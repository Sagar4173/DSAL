Sure, let's go through the program line by line and explain it in simple language:

```cpp
#include <iostream>
#include <fstream>
#include <cstring>
```
These lines include the necessary header files for input/output operations (`iostream`), file handling (`fstream`), and string manipulation (`cstring`).

```cpp
using namespace std;
```
This line allows the program to use names from the `std` namespace without having to write `std::` before each name.

```cpp
struct Student {
    int rollNumber;
    char name[50];
    char division;
    char address[100];
};
```
This defines a structure `Student` that represents a student record. It has four member variables: `rollNumber` (an integer for the roll number), `name` (a character array of size 50 for the student's name), `division` (a single character for the division), and `address` (a character array of size 100 for the student's address).

```cpp
void addStudent() {
    // ...
}
```
This is a function `addStudent()` that allows the user to add a new student record to a file named `students.dat`.

Inside the function:
1. An output file stream `outFile` is created to open the `students.dat` file in binary mode for appending data.
2. A `Student` structure variable `student` is created to store the student details.
3. The user is prompted to enter the roll number, name, division, and address for the new student.
4. The `student` structure is written to the `students.dat` file using the `write()` function.
5. The output file stream is closed.

```cpp
void deleteStudent(int rollNumber) {
    // ...
}
```
This is a function `deleteStudent()` that takes a `rollNumber` as an argument and deletes the corresponding student record from the `students.dat` file.

Inside the function:
1. An input file stream `inFile` is created to open the `students.dat` file in binary mode for reading.
2. An output file stream `outFile` is created to open a temporary file `temp.dat` in binary mode for writing.
3. A `Student` structure variable `student` is created to store student details while reading from the file.
4. A boolean variable `found` is initialized to `false`.
5. The function reads student records from `students.dat` one by one using the `read()` function.
6. If the current student's roll number matches the `rollNumber` argument, the `found` flag is set to `true`, and the record is skipped (not written to `temp.dat`).
7. If the current student's roll number doesn't match the `rollNumber` argument, the record is written to `temp.dat`.
8. After reading all records, the input and output file streams are closed.
9. If the `found` flag is `true`, the `students.dat` file is deleted, the `temp.dat` file is renamed to `students.dat`, and a success message is printed. Otherwise, the `temp.dat` file is deleted, and a "not found" message is printed.

```cpp
void displayStudent(int rollNumber) {
    // ...
}
```
This is a function `displayStudent()` that takes a `rollNumber` as an argument and displays the corresponding student record from the `students.dat` file.

Inside the function:
1. An input file stream `inFile` is created to open the `students.dat` file in binary mode for reading.
2. A `Student` structure variable `student` is created to store student details while reading from the file.
3. A boolean variable `found` is initialized to `false`.
4. The function reads student records from `students.dat` one by one using the `read()` function.
5. If the current student's roll number matches the `rollNumber` argument, the student's details (roll number, name, division, and address) are printed, and the `found` flag is set to `true`. The loop is then broken.
6. After reading all records (or after finding the student), the input file stream is closed.
7. If the `found` flag is `false`, a "not found" message is printed.

```cpp
int main() {
    // ...
}
```
This is the `main()` function where the program execution starts.

Inside the `main()` function:
1. Integer variables `choice` and `rollNumber` are declared.
2. A `do-while` loop is used to display a menu and perform operations based on the user's choice.
3. Inside the loop, a menu with options (Add Student, Delete Student, Display Student, Quit) is displayed.
4. The user's choice is read into the `choice` variable.
5. A `switch` statement is used to execute the appropriate function based on the user's choice:
   - If the choice is 1, the `addStudent()` function is called to add a new student record.
   - If the choice is 2, the user is prompted to enter a roll number, and the `deleteStudent()` function is called with the entered roll number to delete the corresponding student record.
   - If the choice is 3, the user is prompted to enter a roll number, and the `displayStudent()` function is called with the entered roll number to display the corresponding student record.
   - If the choice is 4, the loop is exited.
   - If the choice is invalid, an error message is displayed.
6. The loop continues until the user chooses to quit (option 4).

Overall, this program implements a simple student information system using file handling in C++. It allows the user to add new student records, delete existing student records by roll number, and display student records by roll number. The student records are stored in a binary file named `students.dat`.